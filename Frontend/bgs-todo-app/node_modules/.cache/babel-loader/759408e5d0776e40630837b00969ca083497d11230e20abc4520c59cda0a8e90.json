{"ast":null,"code":"import axios from 'axios';\nimport isTokenExpired from '../utility/tokenExpired';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// interceptor to include auth token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    if (isTokenExpired(token)) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n      return Promise.reject('Token expired');\n    }\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add this after your request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    if (isTokenExpired(token)) {\n      // Token is expired, clear storage and redirect\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n      return Promise.reject('Token expired');\n    }\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// AUTH API service methods\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login/', credentials);\n      // Store token immediately after successful login\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        // Add logging to debug token storage\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\n      }\n      return response;\n    } catch (error) {\n      var _error$response;\n      console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  },\n  register: userData => api.post('/auth/register/', userData),\n  updateUser: userData => api.put('/auth/user/update/', userData),\n  refreshUserData: async userId => {\n    try {\n      const response = await api.get(`/auth/users/${userId}/`);\n      // Update localStorage with fresh user data\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Failed to refresh user data'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// TASK API service methods\nexport const todoService = {\n  getTasks: () => api.get('/tasks/tasks/'),\n  getTask: id => api.get(`/tasks/tasks/${id}`),\n  addTask: taskData => api.post('/tasks/tasks/', taskData),\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\n  deleteTask: id => api.delete(`/tasks/tasks/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","isTokenExpired","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","removeItem","window","location","href","Promise","reject","Authorization","error","authService","login","credentials","response","post","data","setItem","console","log","substring","_error$response","message","register","userData","updateUser","put","refreshUserData","userId","get","JSON","stringify","_error$response2","logout","todoService","getTasks","getTask","id","addTask","taskData","updateTask","task","deleteTask","delete"],"sources":["C:/Users/keshi/Desktop/To Do List App/Frontend/bgs-todo-app/src/components/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport isTokenExpired from '../utility/tokenExpired'; \r\n\r\n// Create an axios instance with default configuration\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n\r\n\r\n// interceptor to include auth token in requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      if (isTokenExpired(token)) {\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return Promise.reject('Token expired');\r\n      }\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add this after your request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (token) {\r\n      if (isTokenExpired(token)) {\r\n        // Token is expired, clear storage and redirect\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return Promise.reject('Token expired');\r\n      }\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// AUTH API service methods\r\nexport const authService = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login/', credentials);\r\n      // Store token immediately after successful login\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        // Add logging to debug token storage\r\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\r\n      }\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n  register: (userData) => api.post('/auth/register/', userData),\r\n  updateUser: (userData) => api.put('/auth/user/update/', userData),\r\n  refreshUserData: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/auth/users/${userId}/`);\r\n      // Update localStorage with fresh user data\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to refresh user data' };\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\n\r\n// TASK API service methods\r\nexport const todoService = {\r\n  getTasks: () => api.get('/tasks/tasks/'),\r\n  getTask: (id) => api.get(`/tasks/tasks/${id}`),\r\n  addTask: (taskData) => api.post('/tasks/tasks/', taskData), \r\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\r\n  deleteTask: (id) => api.delete(`/tasks/tasks/${id}`),\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}