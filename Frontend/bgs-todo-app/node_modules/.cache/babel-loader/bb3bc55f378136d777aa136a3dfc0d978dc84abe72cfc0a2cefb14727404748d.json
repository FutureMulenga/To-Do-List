{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  // Adjust this to match your backend URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// AUTH API service methods\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login/', credentials);\n      // Store token immediately after successful login\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        // Add logging to debug token storage\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\n      }\n      return response;\n    } catch (error) {\n      var _error$response;\n      console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  },\n  register: userData => api.post('/auth/register/', userData),\n  updateUser: userData => api.put('/auth/user/update/', userData),\n  refreshUserData: async userId => {\n    try {\n      const response = await api.get(`/auth/users/${userId}/`);\n      // Update localStorage with fresh user data\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Failed to refresh user data'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// TASK API service methods\nexport const todoService = {\n  getTasks: () => api.get('/tasks/tasks/'),\n  getTask: id => api.get(`/tasks/tasks/${id}`),\n  addTask: taskData => api.post('/tasks/tasks/', taskData),\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\n  deleteTask: id => api.delete(`/tasks/tasks/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authService","login","credentials","response","post","data","setItem","console","log","substring","_error$response","message","register","userData","updateUser","put","refreshUserData","userId","get","JSON","stringify","_error$response2","logout","removeItem","todoService","getTasks","getTask","id","addTask","taskData","updateTask","task","deleteTask","delete"],"sources":["C:/Users/keshi/Desktop/To Do List App/Frontend/bgs-todo-app/src/components/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default configuration\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api', // Adjust this to match your backend URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n\r\n\r\n// Add a request interceptor to include auth token in requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n\r\n\r\n// AUTH API service methods\r\nexport const authService = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login/', credentials);\r\n      // Store token immediately after successful login\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        // Add logging to debug token storage\r\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\r\n      }\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n  register: (userData) => api.post('/auth/register/', userData),\r\n  updateUser: (userData) => api.put('/auth/user/update/', userData),\r\n  refreshUserData: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/auth/users/${userId}/`);\r\n      // Update localStorage with fresh user data\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to refresh user data' };\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\n\r\n// TASK API service methods\r\nexport const todoService = {\r\n  getTasks: () => api.get('/tasks/tasks/'),\r\n  getTask: (id) => api.get(`/tasks/tasks/${id}`),\r\n  addTask: (taskData) => api.post('/tasks/tasks/', taskData), \r\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\r\n  deleteTask: (id) => api.delete(`/tasks/tasks/${id}`),\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}