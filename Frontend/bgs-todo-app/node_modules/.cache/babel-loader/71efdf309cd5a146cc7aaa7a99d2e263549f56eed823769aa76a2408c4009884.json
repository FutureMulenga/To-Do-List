{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// interceptor to include auth token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add this after your request interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response2$data, _error$response2$data2;\n  // Check for 401 (Unauthorized) or token expiration\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || (_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && (_error$response2$data2 = _error$response2$data.detail) !== null && _error$response2$data2 !== void 0 && _error$response2$data2.includes('expired')) {\n    var _error$config, _error$response3, _error$response4, _error$response4$data;\n    // Clear authentication data\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Log the error details\n    console.error('Authentication error:', {\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      message: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail\n    });\n\n    // Redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// AUTH API service methods\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login/', credentials);\n      // Store token immediately after successful login\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        // Add logging to debug token storage\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\n      }\n      return response;\n    } catch (error) {\n      var _error$response5;\n      console.error('Login error:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  },\n  register: userData => api.post('/auth/register/', userData),\n  updateUser: userData => api.put('/auth/user/update/', userData),\n  refreshUserData: async userId => {\n    try {\n      const response = await api.get(`/auth/users/${userId}/`);\n      // Update localStorage with fresh user data\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: 'Failed to refresh user data'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// TASK API service methods\nexport const todoService = {\n  getTasks: () => api.get('/tasks/tasks/'),\n  getTask: id => api.get(`/tasks/tasks/${id}`),\n  addTask: taskData => api.post('/tasks/tasks/', taskData),\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\n  deleteTask: id => api.delete(`/tasks/tasks/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","_error$response2$data2","status","data","detail","includes","_error$config","_error$response3","_error$response4","_error$response4$data","removeItem","console","url","message","window","location","href","authService","login","credentials","post","setItem","log","substring","_error$response5","register","userData","updateUser","put","refreshUserData","userId","get","JSON","stringify","_error$response6","logout","todoService","getTasks","getTask","id","addTask","taskData","updateTask","task","deleteTask","delete"],"sources":["C:/Users/keshi/Desktop/To Do List App/Frontend/bgs-todo-app/src/components/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default configuration\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n\r\n\r\n// interceptor to include auth token in requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add this after your request interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // Check for 401 (Unauthorized) or token expiration\r\n    if (error.response?.status === 401 || \r\n        error.response?.data?.detail?.includes('expired')) {\r\n      // Clear authentication data\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      \r\n      // Log the error details\r\n      console.error('Authentication error:', {\r\n        url: error.config?.url,\r\n        status: error.response?.status,\r\n        message: error.response?.data?.detail\r\n      });\r\n\r\n      // Redirect to login page\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n// AUTH API service methods\r\nexport const authService = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login/', credentials);\r\n      // Store token immediately after successful login\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        // Add logging to debug token storage\r\n        console.log('Token stored successfully:', response.data.token.substring(0, 20) + '...');\r\n      }\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n  register: (userData) => api.post('/auth/register/', userData),\r\n  updateUser: (userData) => api.put('/auth/user/update/', userData),\r\n  refreshUserData: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/auth/users/${userId}/`);\r\n      // Update localStorage with fresh user data\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to refresh user data' };\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\n\r\n// TASK API service methods\r\nexport const todoService = {\r\n  getTasks: () => api.get('/tasks/tasks/'),\r\n  getTask: (id) => api.get(`/tasks/tasks/${id}`),\r\n  addTask: (taskData) => api.post('/tasks/tasks/', taskData), \r\n  updateTask: (id, task) => api.put(`/tasks/tasks/${id}/`, task),\r\n  deleteTask: (id) => api.delete(`/tasks/tasks/${id}`),\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}